                                    Setting up the New Laravel Project

Initial Project Setup
    INSTALL COMPOSER
    Composer is the dependency manager for PHP, and we will be using it to create our Laravel project 
        as well as to install any third-party packages.
    To install composer on Windows, simply download and run the .exe file: https://getcomposer.org/Composer-Setup.exe
    Once completes, just open a command line and type in "Composer". You should see the help page for Composer.
    Tạm thời tắt phần mềm diệt virut và cài đặt project laravel
        composer create-project --prefer-dist laravel/laravel designhouse-api
        Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
        được public trên link url thì có thể dùng virtual host
        C:\xampp\apache\conf\extra\httpd-vhosts.conf
        <VirtualHost *:80>
            ServerAdmin designhouse.xyz
            DocumentRoot "C:/xampp/htdocs/designhouse/designhouse-api/public"
            ServerName designhouse.xyz
            ErrorLog "logs/designhouse.xyz-error.log"
            CustomLog "logs/designhouse.xyz-access.log" common
            <Directory "/">
                Deny from all
                Allow from 127.0.0.1
            </Directory>
        </VirtualHost>
    - Remove public trên URL
    C:\Windows\System32\drivers\etc -----------> hosts
        127.0.0.1       designhouse.xyz
	app/Models/User.php 
    config\auth.php 
        'providers' => [
            'users' => [
                'driver' => 'eloquent',
                'model' => App\Models\User::class,
            ]
        ],
    routes/api.php 
        <?php
        use Illuminate\Support\Facades\Route;

        Route::get('/', function() {
            return response()->json(['message' => 'Hello World!'], 200);
        });
    http://designhouse.xyz/api
        {
            "message": "Hello World!"
        }
Setup POSTMAN
    Import postman_collection.json
    Test http://designhouse.xyz/api
        Headers: 
            Content-Type: application/json
            Accept: application/json
    Environments
        Add: Environments: Designhouse
        Key: BASE_URL
        Value: http://designhouse.xyz/api
    {{BASE_URL}}/
Setup Database Connection
    .env 
        APP_NAME=Designhouse
        APP_URL=http://designhouse.xyz
        DB_DATABASE=designhouse
    php artisan migrate 
SMTP Setting
    https://mailtrap.io/signin
    Inboxes -> Demo inbox
    SMTP Settings 
    Integrations: Laravel 
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.mailtrap.io
        MAIL_PORT=2525
        MAIL_USERNAME=f12e0f4ba28372
        MAIL_PASSWORD=4f297b23303323
        MAIL_ENCRYPTION=tls
    
        ==================================================================================================

                            Authenticating API users in Laravel with JWT

Setting up JWT Authentication
    jwt-auth
    https://github.com/tymondesigns/jwt-auth
    jwt-auth install via composer 
    https://jwt-auth.readthedocs.io/en/develop/laravel-installation/
        composer require tymon/jwt-auth
    Trường hợp có lỗi Allowed memory size of 1610612736 bytes exhausted
        thì khắc phục như sau:
        php.iniのmemory_limitの設定値を出力する
            512M
        512M割り当てられていました。 memory_limit = -1とするとメモリ割り当てを無制限にすることができます。
        sudo vi /etc/php.ini
        php.ini
            memory_limit = -1  ; -1に変更
    Publish the config
        php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
    Generate secret key
        php artisan jwt:secret
    Update User model
    Configure Auth guard
        config/auth.php
            'guard' => 'api', (web -> api)
            'driver' => 'jwt', (token -> jwt)
User Registration I: Setting up the registration fields
    Laravel MySql Spatial extension 
    https://viblo.asia/p/geo-spatial-mysql-in-laravel-5-MdZkAAQokox
    https://github.com/grimzy/laravel-mysql-spatial
        composer require grimzy/laravel-mysql-spatial:^4.0
    User Model: 
        use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;
        use SpatialTrait;
        protected $spatialFields = [
            'location'
        ];
    php artisan migrate:fresh 
    