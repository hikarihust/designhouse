                                    Setting up the New Laravel Project

Initial Project Setup
    INSTALL COMPOSER
    Composer is the dependency manager for PHP, and we will be using it to create our Laravel project 
        as well as to install any third-party packages.
    To install composer on Windows, simply download and run the .exe file: https://getcomposer.org/Composer-Setup.exe
    Once completes, just open a command line and type in "Composer". You should see the help page for Composer.
    Tạm thời tắt phần mềm diệt virut và cài đặt project laravel
        composer create-project --prefer-dist laravel/laravel designhouse-api
        Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
        được public trên link url thì có thể dùng virtual host
        C:\xampp\apache\conf\extra\httpd-vhosts.conf
        <VirtualHost *:80>
            ServerAdmin designhouse.xyz
            DocumentRoot "C:/xampp/htdocs/designhouse/designhouse-api/public"
            ServerName designhouse.xyz
            ErrorLog "logs/designhouse.xyz-error.log"
            CustomLog "logs/designhouse.xyz-access.log" common
            <Directory "/">
                Deny from all
                Allow from 127.0.0.1
            </Directory>
        </VirtualHost>
    - Remove public trên URL
    C:\Windows\System32\drivers\etc -----------> hosts
        127.0.0.1       designhouse.xyz
	app/Models/User.php 
    config\auth.php 
        'providers' => [
            'users' => [
                'driver' => 'eloquent',
                'model' => App\Models\User::class,
            ]
        ],
    routes/api.php 
        <?php
        use Illuminate\Support\Facades\Route;

        Route::get('/', function() {
            return response()->json(['message' => 'Hello World!'], 200);
        });
    http://designhouse.xyz/api
        {
            "message": "Hello World!"
        }
Setup POSTMAN
    Import postman_collection.json
    Test http://designhouse.xyz/api
        Headers: 
            Content-Type: application/json
            Accept: application/json
    Environments
        Add: Environments: Designhouse
        Key: BASE_URL
        Value: http://designhouse.xyz/api
    {{BASE_URL}}/
Setup Database Connection
    .env 
        APP_NAME=Designhouse
        APP_URL=http://designhouse.xyz
        DB_DATABASE=designhouse
    php artisan migrate 
SMTP Setting
    https://mailtrap.io/signin
    Inboxes -> Demo inbox
    SMTP Settings 
    Integrations: Laravel 
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.mailtrap.io
        MAIL_PORT=2525
        MAIL_USERNAME=f12e0f4ba28372
        MAIL_PASSWORD=4f297b23303323
        MAIL_ENCRYPTION=tls
    
        ==================================================================================================

                            Authenticating API users in Laravel with JWT

Setting up JWT Authentication
    jwt-auth
    https://github.com/tymondesigns/jwt-auth
    jwt-auth install via composer 
    https://jwt-auth.readthedocs.io/en/develop/laravel-installation/
        composer require tymon/jwt-auth
    Trường hợp có lỗi Allowed memory size of 1610612736 bytes exhausted
        thì khắc phục như sau:
        php.iniのmemory_limitの設定値を出力する
            512M
        512M割り当てられていました。 memory_limit = -1とするとメモリ割り当てを無制限にすることができます。
        sudo vi /etc/php.ini
        php.ini
            memory_limit = -1  ; -1に変更
    Publish the config
        php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
    Generate secret key
        php artisan jwt:secret
    Update User model
    Configure Auth guard
        config/auth.php
            'guard' => 'api', (web -> api)
            'driver' => 'jwt', (token -> jwt)
User Registration I: Setting up the registration fields
    Laravel MySql Spatial extension 
    https://viblo.asia/p/geo-spatial-mysql-in-laravel-5-MdZkAAQokox
    https://github.com/grimzy/laravel-mysql-spatial
        composer require grimzy/laravel-mysql-spatial:^4.0
    User Model: 
        use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;
        use SpatialTrait;
        protected $spatialFields = [
            'location'
        ];
    php artisan migrate:fresh 
User Registration II: Registering the user 
    composer create-project --prefer-dist laravel/laravel designhouse-api
    composer require laravel/ui
    php artisan ui vue --auth
    register() là hàm được kế thừa từ vendor\laravel\ui\auth-backend\RegistersUsers.php
    {{BASE_URL}}/register
    Body -> raw 
        {
            "username": "june",
            "name": "June May",
            "email": "june@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    https://stackoverflow.com/questions/63807930/target-class-controller-does-not-exist-laravel-8
        Route::prefix('api')
            ->middleware('api')
            ->namespace($this->namespace)
            ->group(base_path('routes/api.php'));
        ->
        Route::prefix('api')
            ->middleware('api')
            ->namespace('App\Http\Controllers')
            ->group(base_path('routes/api.php'));
Email Verification I: Setting up the user activation process
    .env
    MAIL_FROM_ADDRESS=vudinhquang222@gmail.com
    {{BASE_URL}}/register
        {
            "username": "peter",
            "name": "Peter",
            "email": "peter@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    check mail: https://mailtrap.io/inboxes/1042943/messages/1887647561
Email Verification II: Customizing the verification email notification
    http://designhouse.xyz/api/verification/verify?expires=1601921602&hash=1b2404cd9601006d56dcee5f06c9e7a01ec03c0d&id=5&signature=388ecd16801f5322b4b83bb5f662a9e7a38ee7db139d4fd4c4a450ebbc25ee2e
    It is because APP_URL=http://designhouse.xyz(.env)
    php artisan make:notification VerifyEmail
    .env 
        CLIENT_URL=http://designhouse.xyz:3000
    php artisan migrate:fresh 
    {{BASE_URL}}/register
    http://designhouse.xyz:3000/verification/verify?expires=1601923981&user=1&signature=d6ca65980962883864f21487ce2f165c8c87354dfbfc8f9ed3682a0402a69631
Email Verification III: Resending the verification email
    {{BASE_URL}}/verification/resend
        -> verification link resent
    Please click the button below to verify your email address.
    http://designhouse.xyz:3000/verification/verify?expires=1601949944&user=1&signature=c085a22c25fd53e9a6e93bc1941f7a94fbd8ad2e265b99c1bea386166e7e0092
Email Verification IV: Activating the user's account
    Route::post('verification/verify/{user}', 'Auth\VerificationController@verify')->name('verification.verify'); (thêm {user})
    php artisan migrate:fresh
    {{BASE_URL}}/register
    {{BASE_URL}}/verification/resend
         "status": "verification link resent"
    {{BASE_URL}}/verification/verify/1?expires=1601950637&signature=df301ae5a969e7b91b847a000faaeaee36d312f514d0efb69383a2e66fd3a91cZ (Nhận qua mail khi 
        đăng ký hoặc resend)
        ->  "message": "Email successfully verified"
            "message": "Email address already verified"
    {{BASE_URL}}/verification/resend
        -> "message": "Email address already verified"
    Database users table:
        email_verified_at: 2020-10-06 01:35:43
User Login: Issuing JWT tokens
    {{BASE_URL}}/login
    {
        "email": "june@email.com",
        "password": "password"
    }
    ->
    {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NTM1MjIsImV4cCI6MTYwMTk1NzEyMiwibmJmIjoxNjAxOTUzNTIyLCJqdGkiOiJnYjJJU0c4VVM4RThpS3poIiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.m8IHRJTtbrlFEjdi-ePf8ijclSf89ychFAlki11jg4E",
        "token_type": "bearer",
        "expires_in": 1601957122
    }
Email Verification Test
    {{BASE_URL}}/register
    {{BASE_URL}}/login
        -> "message": "You need to verify your email account"
    {{BASE_URL}}/verification/verify/3?expires=1601962724&signature=3711778d3469d7ba51632a4620a03353533ffe351a57bc865c8815f5a9139b45
        -> "message": "Email successfully verified"
    {{BASE_URL}}/login
    ->
        {
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NTkzMTAsImV4cCI6MTYwMTk2MjkxMCwibmJmIjoxNjAxOTU5MzEwLCJqdGkiOiJQcXhiaU80UUh4QXRTcmppIiwic3ViIjozLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.LYUtAbPlxGI7FGfDIRivnnzCVnG8vweSilrEcAOFME8",
            "token_type": "bearer",
            "expires_in": 1601962910
        }
User Logout
    {{BASE_URL}}/logout
        -> "message": "Unauthenticated."
    {{BASE_URL}}/login
        -> token value 
    {{BASE_URL}}/logout
        Authentication: Bearer Token
        Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NjE1NzcsImV4cCI6MTYwMTk2NTE3NywibmJmIjoxNjAxOTYxNTc3LCJqdGkiOiJIbUNTckZGQ3FEV0xpdXF5Iiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.hgB7VHHtQWWFxLcV5HUQ4Xo_qqO0niHqXfCgm46-d1U
        -> "message": "Logged out successfully!"
    Set TOKEN:
        {{BASE_URL}}/login
            Tests
            pm.environment.set("TOKEN", pm.response.json().token)
        {{BASE_URL}}/logout
            Authentication: Bearer Token
            Token: {{TOKEN}}
            Tests: pm.environment.set("TOKEN", "")
        -> "message": "Logged out successfully!"
The famous "ME" endpoint
    php artisan make:controller User/MeController
    {{BASE_URL}}/login
    {{BASE_URL}}/me
    ->
        {
            "user": {
                "id": 1,
                "username": "june",
                "name": "June May",
                "email": "june@email.com",
                "email_verified_at": "2020-10-06T01:26:02.000000Z",
                "tagline": null,
                "about": null,
                "location": null,
                "formatted_address": null,
                "available_to_hire": 0,
                "created_at": "2020-10-06T01:17:17.000000Z",
                "updated_at": "2020-10-06T01:26:02.000000Z"
            }
        }
    {{BASE_URL}}/logout
    {{BASE_URL}}/me -> {}
Introducing API Resources
    php artisan make:resource UserResource
Password Reset - Customising the Email Notification
    php artisan make:notification ResetPassword
Password Reset - Sending the reset email
    {{BASE_URL}}/password/email
        {
            "email": "june@email.com"
        }
    ->
        "status": "We have emailed your password reset link!"
        http://designhouse.xyz:3000/password/reset/fde4d3385a65ec6cc200c49139c731866e53ebd779039d30de80bebddf174937?email=june%40email.com
Password Reset - Resetting the Password
    {{BASE_URL}}/password/reset
        {
            "token": "fde4d3385a65ec6cc200c49139c731866e53ebd779039d30de80bebddf174937",
            "email": "june@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    ->  "status": "Your password has been reset!"
    {{BASE_URL}}/login
        check login again

        ==================================================================================================

                                Updating User Profile

User Profile Update
    php artisan make:controller User/SettingsController
    {{BASE_URL}}/login
    {{BASE_URL}}/settings/profile
    {
        "tagline": "Sr. Multimedia developer",
        "about": "I am a senior multimedia developer at IconX.",
        "name": "Larry Keith",
        "formatted_address": "Airport Road Montreal QC Canada",
        "location": {
            "latitude": 45.458507,
            "longitude": -73.753252
        },
        "available_to_hire": true
    }
    SELECT ST_AsText(location) AS location from designhouse.users where id=1;
    https://qiita.com/nkojima/items/bb21c72858606dedd817
User Password Update
    php artisan make:rule MatchOldPassword
    php artisan make:rule CheckSamePassword
    {{BASE_URL}}/settings/password
    ->  "message": "Password updated"
    {{BASE_URL}}/login to check login 

        ==================================================================================================

                                    Creating and managing Designs
    
The Design Model and Migrations
    php artisan make:model Design -m
    php artisan migrate
Setting up image upload Disks
    User -> Controller -> Save to Temporary Location -> Create Database Record -> Dispatch Job to Crop and Store Images 
        -> Store Image to Disk(S3 or Local) -> Delete Temporary files -> Update Database Record
    php artisan make:controller Designs/UploadController
    php artisan make:migration add_fields_to_designs --table=designs 
    php artisan migrate
Uploading image to Temporary Disk
    {{BASE_URL}}/designs
    php artisan make:job UploadImage
Installing Image Manipulation Library
    http://image.intervention.io/
    composer require intervention/image 
    Integration in Laravel
    config/app.php
        $providers: Intervention\Image\ImageServiceProvider::class
        $aliases: 'Image' => Intervention\Image\Facades\Image::class
Resizing uploaded images
    {{BASE_URL}}/designs -> "disk": "public",
    {
        "image": "1602048522_image1.png",
        "disk": "public",
        "user_id": 1,
        "updated_at": "2020-10-07T05:28:42.000000Z",
        "created_at": "2020-10-07T05:28:42.000000Z",
        "id": 3
    }
Saving images to Amazon s3
    flysystem-aws-s3-v3
    https://github.com/thephpleague/flysystem-aws-s3-v3
    composer require league/flysystem-aws-s3-v3
    AWS Console longin 
    account -> My Security Credentials -> Access keys (access key ID and secret access key)
    .env:
        AWS_ACCESS_KEY_ID=************
        AWS_SECRET_ACCESS_KEY=*************
        AWS_DEFAULT_REGION=us-east-2
        AWS_BUCKET=designhouse-data
    s3 create bucket
        Bucket name: designhouse-data
        Block all public access(không check) -> Object can be public 
        Tạo các folder cho bucket designhouse-data:
            uploads 
                designs 
                    large 
                    original
                    thumbnail
    Amazon S3/designhouse-data -> Permissions -> Bucket Policy -> Policy generator
        Step 1: Select Policy Type
            S3 Bucket Policy
        Step 2: Add Statement(s)
            Effect: Allow
            Principal *
            AWS Service: Amazon S3 
            Actions: 
                DeleteObject
                GetObject
            Amazon Resource Name (ARN): arn:aws:s3:::designhouse-data
            Add Statement 
            Generate Policy 
                {
                    "Id": "Policy1602050952940",
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                        "Sid": "Stmt1602050919345",
                        "Action": [
                            "s3:DeleteObject",
                            "s3:GetObject"
                        ],
                        "Effect": "Allow",
                        "Resource": "arn:aws:s3:::designhouse-data",
                        "Principal": "*"
                        }
                    ]
                }
        "Resource": "arn:aws:s3:::designhouse-data",
        -> "Resource": "arn:aws:s3:::designhouse-data/*",
        Save 
    config/site.php
        return [
            'upload_disk' => 'public' // 'public', 's3'
        ];
    {{BASE_URL}}/designs -> "disk": "s3",
        {
            "image": "1602051478_image1.png",
            "disk": "s3",
            "user_id": 1,
            "updated_at": "2020-10-07T06:17:58.000000Z",
            "created_at": "2020-10-07T06:17:58.000000Z",
            "id": 4
        }
    Check bucket:
        designhouse-data/uploads/designs/large/1602051478_image1.png
            https://designhouse-data.s3.us-east-2.amazonaws.com/uploads/designs/large/1602051478_image1.png
        designhouse-data/uploads/designs/original/1602051478_image1.png
            https://designhouse-data.s3.us-east-2.amazonaws.com/uploads/designs/original/1602051478_image1.png
        designhouse-data/uploads/designs/thumbnail/1602051478_image1.png
            https://designhouse-data.s3.us-east-2.amazonaws.com/uploads/designs/thumbnail/1602051478_image1.png
Setting up Queues to handle uploads
    https://laravel.com/docs/8.x/queues
    https://viblo.asia/p/laravel-queue-QpmleBVM5rd
    https://viblo.asia/p/queues-and-schedules-in-laravel-gGJ59eGx5X2
    .env 
    QUEUE_CONNECTION=sync -> QUEUE_CONNECTION=database
    php artisan queue:table
    php artisan migrate
    Check:
        .env 
        QUEUE_CONNECTION=sync
        {{BASE_URL}}/designs
            "message": "Unauthenticated."
        {{BASE_URL}}/login
        {{BASE_URL}}/designs
            {
                "image": "1602053011_image1.png",
                "disk": "s3",
                "user_id": 1,
                "updated_at": "2020-10-07T06:43:31.000000Z",
                "created_at": "2020-10-07T06:43:31.000000Z",
                "id": 5
            }
        .env 
        QUEUE_CONNECTION=database
        {{BASE_URL}}/designs
        check data of jobs table and designs table có danh sách queues chưa thực hiện
    php artisan queue:work
        check data of jobs table and designs table
        Danh sách các queues đang chờ sẽ được thực thi 
Updating design information
    php artisan make:controller Designs/DesignController
    {{BASE_URL}}/login
    {{BASE_URL}}/designs/1  (upload_successful=0) -> is_live: false
        {
            "title": "Fancy UI Phone Design",
            "description": "This is a fancy 3D mobile app icon pack for free use",
            "is_live": true
        }
    {{BASE_URL}}/designs/2  (upload_successful=1) -> is_live: true
        {
            "title": "Lorem ipsum",
            "description": "This is a fancy 3D mobile app icon pack for free use",
            "is_live": true
        }
Creating a Policy for Updating designs and customising Exception
    https://stackoverflow.com/questions/60608732/error-to-update-laravel-5-8-to-laravel-7-0
    app\Exceptions\Handler.php
        use Throwable;
        public function report(Throwable $exception);
        public function shouldReport(Throwable $exception);
        public function render($request, Throwable $exception);
        public function renderForConsole($output, Throwable $exception);
    php artisan make:policy DesignPolicy --model=Design
    Check user login hiện tại để xem ai là người update 
    https://viblo.asia/p/policy-trong-laravel-WAyK80YkKxX
    Đăng kí Policy: app\Providers\AuthServiceProvider.php
    Khai báo Sử dụng trong Controller
    {{BASE_URL}}/designs/2
API Resource for Designs and generating image URL's
    php artisan make:resource DesignResource
    https://viblo.asia/p/laravel-resource-api-XL6lA4g4Zek
    {{BASE_URL}}/designs/2
    public: http://designhouse.xyz/storage/uploads/designs/thumbnail/1602047984_image1.png
        config/filesystem.php
        'url' => env('APP_URL').'/storage',
    s3: https://designhouse-data.s3.us-east-2.amazonaws.com/uploads/designs/thumbnail/1602051478_image1.png
Deleting records and images from the File system
    $design = Design::findOrFail($id);
    モデルが見つからない時に、例外を投げたい場合もあります。これは特にルートやコントローラーの中で便利です。
        findOrFailメソッドとクエリの最初の結果を取得するfirstOrFailメソッドは、該当するレコードが見つからない場合に
        Illuminate\Database\Eloquent\ModelNotFoundException例外を投げます。
    {{BASE_URL}}/designs/2 Delete public local
    {{BASE_URL}}/designs/4 Delete s3 
Adding Tags to Designs
    eloquent-taggable 
    https://github.com/cviebrock/eloquent-taggable
    1.Install the cviebrock/eloquent-taggable package via composer:
        composer require cviebrock/eloquent-taggable
    2.Publish the configuration file:
        php artisan vendor:publish --provider="Cviebrock\EloquentTaggable\ServiceProvider" --tag "config"
    3.Publish the migrations
        php artisan vendor:publish --provider="Cviebrock\EloquentTaggable\ServiceProvider" --tag "migrations"
    4.Finally, use artisan to run the migration to create the required tables
        composer dump-autoload
        php artisan migrate
    Updating Eloquent Models
        use Cviebrock\EloquentTaggable\Taggable;
        use Taggable;
    config/taggable.php
        'normalizer'           => 'mb_strtolower',
        =>'normalizer' => ['Illuminate\Support\Str', 'slug'],
    {{BASE_URL}}/designs/9
        {
            "title": "Test tags",
            "description": "This is a fancy 3D mobile app icon pack for free use",
            "is_live": true,
            "tags": ["Adobe Photoshop", "Adobe After Effects"]
        }
    php artisan migrate:rollback 
    php artisan migrate 

        ==================================================================================================

                                    Laravel Repository Pattern
    
Add Index Methods to Users and Designs
    php artisan make:controller User/UserController 
    {{BASE_URL}}/users
    {{BASE_URL}}/designs
Create a simple Repository
    https://viblo.asia/p/trien-khai-repository-trong-laravel-m68Z0x6MZkG
    https://viblo.asia/p/repository-pattern-trong-laravel-gGJ59jPaKX2
    php artisan make:provider RepositoryServiceProvider
    https://nickescobedo.com/906/how-to-bind-an-interface-to-an-implementation-in-laravel
    https://stackoverflow.com/questions/34756954/laravel-service-provider-not-binding-to-contract
Create the Base Repository and Interface
    php artisan make:exception ModelNotDefined
    {{BASE_URL}}/designs
    {{BASE_URL}}/users
Implementing common Repository Methods
    {{BASE_URL}}/designs/1
    {{BASE_URL}}/login
    {{BASE_URL}}/designs/1
Setup and test Filter Criteria
    flatten(): flattenメソッドは多次元コレクションを一次元化します。
        $collection = collect(['name' => 'taylor', 'languages' => ['php', 'javascript']]);
        -> ['taylor', 'php', 'javascript'];
    https://packagist.org/packages/prettus/l5-repository
Create Criterion for User's designs
Setup Debugging to profile API SQL Queries
    laravel-debugbar 
    https://github.com/barryvdh/laravel-debugbar
    Installation
        composer require barryvdh/laravel-debugbar --dev
    Copy the package config to your local config with the publish command
        php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"
    http://designhouse.xyz/
    Disable
        .env
        DEBUGBAR_ENABLED=false
        php artisan config:cache
    php artisan make:middleware ProfileJsonResponse
    Kernel.php:
        \App\Http\Middleware\ProfileJsonResponse::class,
    {{BASE_URL}}/users?_debug=true
    {{BASE_URL}}/users
    Arr::onlyメソッドは配列中の指定されたキー／値ペアのアイテムのみを返します。
Adding Eager-Loading Criteria to the Repository
    Laravel Eloquent
    クエリの数を徹底的に減らすために、Eagerローディングを使うことができます。withメソッドを使い指定してください。
    この操作では２つだけしかクエリが実行されません。
    select * from `users`
    select * from `designs` where `designs`.`user_id` in (1, 2, 3)
    
        ==================================================================================================

                                    Adding Comment and Likes to the Application

Setting up Comment model and Repository
    php artisan make:model Comment -m
    morphTo
    https://viblo.asia/p/quan-he-da-hinh-polymorphic-relationships-trong-laravel-58-XL6lAnbm5ek
    $table->morphs('commentable');
        commentable_id - integer
        commentable_type - string
    php artisan migrate
    php artisan make:controller Designs/CommentController
Create Comments and Comment API Resource
    php artisan make:resource CommentResource
    {{BASE_URL}}/designs/9/comments
        commentable_id: 9
        commentable_type: App\Models\Design
Updating and deleting comments
    php artisan make:policy CommentPolicy --model=Comment
    {{BASE_URL}}/comments/1 (PUT)
    {{BASE_URL}}/comments/1 (DELETE)
Solving the famous N+1 problem with Eagerloading
    https://viblo.asia/p/laravel-resource-api-maGK740BZj2
    whenLoaded
    {{BASE_URL}}/designs?_debug=true
        "nb_statements": 7,
Setting up Likes Model and Trait
    php artisan make:model Like -m
    php artisan migrate
    https://viblo.asia/p/traits-in-php-and-laravel-l0rvmxzQGyqA
    https://viblo.asia/p/using-php-traits-for-laravel-eloquent-relationships-4P856doRZY3
Unliking and Bootable Trait method
    {{BASE_URL}}/login
        {
            "email": "june@email.com",
            "password": "password123"
        }
    {{BASE_URL}}/designs/9/like
    Laravel Model Events
        https://viblo.asia/p/laravel-model-events-AyQMpJDpv0Ek
    Với mỗi trait được sử dụng bện trong model, khi model được khởi tạo Laravel sẽ kiểm tra sự tồn tại của một 
        phương thức đặc biệt trong trait đó - boot + <trait_name> và gọi phương thức đó nếu có.
        bootLikeable()
    {{BASE_URL}}/designs/6/like    (POST)
    {{BASE_URL}}/designs/6         (DELETE)
    SELECT * FROM designhouse.likes;
        -> like of designs/6 Deleted 
One last endpoint and conclusion on Likes and Comments
    {{BASE_URL}}/designs/9/liked
   
        ==================================================================================================

                                    Setting up Designer Teams
    Quan hệ của teams và users: N-N
    teams   -------  team_user(members)  ------- users 
      |                                   |
            -------  invitations ------
Creating the Team Models and Migrations
    php artisan make:model Team -m
    php artisan migrate
Setting up the Team Repository, Contract and Controller
    php artisan make:controller Teams/TeamsController
Creating teams with  CREATED and DELETING Boot methods
    attach sync
    https://viblo.asia/p/eloquent-relationships-in-laravel-53-chap-3-DZrGNDmjkVB
    php artisan make:resource TeamResource
    {{BASE_URL}}/teams
    