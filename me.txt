                                    Setting up the New Laravel Project

Initial Project Setup
    INSTALL COMPOSER
    Composer is the dependency manager for PHP, and we will be using it to create our Laravel project 
        as well as to install any third-party packages.
    To install composer on Windows, simply download and run the .exe file: https://getcomposer.org/Composer-Setup.exe
    Once completes, just open a command line and type in "Composer". You should see the help page for Composer.
    Tạm thời tắt phần mềm diệt virut và cài đặt project laravel
        composer create-project --prefer-dist laravel/laravel designhouse-api
        Để vào được trang web của dự án thì cần truy cập vào trong folder public, để có thể xóa
        được public trên link url thì có thể dùng virtual host
        C:\xampp\apache\conf\extra\httpd-vhosts.conf
        <VirtualHost *:80>
            ServerAdmin designhouse.xyz
            DocumentRoot "C:/xampp/htdocs/designhouse/designhouse-api/public"
            ServerName designhouse.xyz
            ErrorLog "logs/designhouse.xyz-error.log"
            CustomLog "logs/designhouse.xyz-access.log" common
            <Directory "/">
                Deny from all
                Allow from 127.0.0.1
            </Directory>
        </VirtualHost>
    - Remove public trên URL
    C:\Windows\System32\drivers\etc -----------> hosts
        127.0.0.1       designhouse.xyz
	app/Models/User.php 
    config\auth.php 
        'providers' => [
            'users' => [
                'driver' => 'eloquent',
                'model' => App\Models\User::class,
            ]
        ],
    routes/api.php 
        <?php
        use Illuminate\Support\Facades\Route;

        Route::get('/', function() {
            return response()->json(['message' => 'Hello World!'], 200);
        });
    http://designhouse.xyz/api
        {
            "message": "Hello World!"
        }
Setup POSTMAN
    Import postman_collection.json
    Test http://designhouse.xyz/api
        Headers: 
            Content-Type: application/json
            Accept: application/json
    Environments
        Add: Environments: Designhouse
        Key: BASE_URL
        Value: http://designhouse.xyz/api
    {{BASE_URL}}/
Setup Database Connection
    .env 
        APP_NAME=Designhouse
        APP_URL=http://designhouse.xyz
        DB_DATABASE=designhouse
    php artisan migrate 
SMTP Setting
    https://mailtrap.io/signin
    Inboxes -> Demo inbox
    SMTP Settings 
    Integrations: Laravel 
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.mailtrap.io
        MAIL_PORT=2525
        MAIL_USERNAME=f12e0f4ba28372
        MAIL_PASSWORD=4f297b23303323
        MAIL_ENCRYPTION=tls
    
        ==================================================================================================

                            Authenticating API users in Laravel with JWT

Setting up JWT Authentication
    jwt-auth
    https://github.com/tymondesigns/jwt-auth
    jwt-auth install via composer 
    https://jwt-auth.readthedocs.io/en/develop/laravel-installation/
        composer require tymon/jwt-auth
    Trường hợp có lỗi Allowed memory size of 1610612736 bytes exhausted
        thì khắc phục như sau:
        php.iniのmemory_limitの設定値を出力する
            512M
        512M割り当てられていました。 memory_limit = -1とするとメモリ割り当てを無制限にすることができます。
        sudo vi /etc/php.ini
        php.ini
            memory_limit = -1  ; -1に変更
    Publish the config
        php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"
    Generate secret key
        php artisan jwt:secret
    Update User model
    Configure Auth guard
        config/auth.php
            'guard' => 'api', (web -> api)
            'driver' => 'jwt', (token -> jwt)
User Registration I: Setting up the registration fields
    Laravel MySql Spatial extension 
    https://viblo.asia/p/geo-spatial-mysql-in-laravel-5-MdZkAAQokox
    https://github.com/grimzy/laravel-mysql-spatial
        composer require grimzy/laravel-mysql-spatial:^4.0
    User Model: 
        use Grimzy\LaravelMysqlSpatial\Eloquent\SpatialTrait;
        use SpatialTrait;
        protected $spatialFields = [
            'location'
        ];
    php artisan migrate:fresh 
User Registration II: Registering the user 
    composer create-project --prefer-dist laravel/laravel designhouse-api
    composer require laravel/ui
    php artisan ui vue --auth
    register() là hàm được kế thừa từ vendor\laravel\ui\auth-backend\RegistersUsers.php
    {{BASE_URL}}/register
    Body -> raw 
        {
            "username": "june",
            "name": "June May",
            "email": "june@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    https://stackoverflow.com/questions/63807930/target-class-controller-does-not-exist-laravel-8
        Route::prefix('api')
            ->middleware('api')
            ->namespace($this->namespace)
            ->group(base_path('routes/api.php'));
        ->
        Route::prefix('api')
            ->middleware('api')
            ->namespace('App\Http\Controllers')
            ->group(base_path('routes/api.php'));
Email Verification I: Setting up the user activation process
    .env
    MAIL_FROM_ADDRESS=vudinhquang222@gmail.com
    {{BASE_URL}}/register
        {
            "username": "peter",
            "name": "Peter",
            "email": "peter@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    check mail: https://mailtrap.io/inboxes/1042943/messages/1887647561
Email Verification II: Customizing the verification email notification
    http://designhouse.xyz/api/verification/verify?expires=1601921602&hash=1b2404cd9601006d56dcee5f06c9e7a01ec03c0d&id=5&signature=388ecd16801f5322b4b83bb5f662a9e7a38ee7db139d4fd4c4a450ebbc25ee2e
    It is because APP_URL=http://designhouse.xyz(.env)
    php artisan make:notification VerifyEmail
    .env 
        CLIENT_URL=http://designhouse.xyz:3000
    php artisan migrate:fresh 
    {{BASE_URL}}/register
    http://designhouse.xyz:3000/verification/verify?expires=1601923981&user=1&signature=d6ca65980962883864f21487ce2f165c8c87354dfbfc8f9ed3682a0402a69631
Email Verification III: Resending the verification email
    {{BASE_URL}}/verification/resend
        -> verification link resent
    Please click the button below to verify your email address.
    http://designhouse.xyz:3000/verification/verify?expires=1601949944&user=1&signature=c085a22c25fd53e9a6e93bc1941f7a94fbd8ad2e265b99c1bea386166e7e0092
Email Verification IV: Activating the user's account
    Route::post('verification/verify/{user}', 'Auth\VerificationController@verify')->name('verification.verify'); (thêm {user})
    php artisan migrate:fresh
    {{BASE_URL}}/register
    {{BASE_URL}}/verification/resend
         "status": "verification link resent"
    {{BASE_URL}}/verification/verify/1?expires=1601950637&signature=df301ae5a969e7b91b847a000faaeaee36d312f514d0efb69383a2e66fd3a91cZ (Nhận qua mail khi 
        đăng ký hoặc resend)
        ->  "message": "Email successfully verified"
            "message": "Email address already verified"
    {{BASE_URL}}/verification/resend
        -> "message": "Email address already verified"
    Database users table:
        email_verified_at: 2020-10-06 01:35:43
User Login: Issuing JWT tokens
    {{BASE_URL}}/login
    {
        "email": "june@email.com",
        "password": "password"
    }
    ->
    {
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NTM1MjIsImV4cCI6MTYwMTk1NzEyMiwibmJmIjoxNjAxOTUzNTIyLCJqdGkiOiJnYjJJU0c4VVM4RThpS3poIiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.m8IHRJTtbrlFEjdi-ePf8ijclSf89ychFAlki11jg4E",
        "token_type": "bearer",
        "expires_in": 1601957122
    }
Email Verification Test
    {{BASE_URL}}/register
    {{BASE_URL}}/login
        -> "message": "You need to verify your email account"
    {{BASE_URL}}/verification/verify/3?expires=1601962724&signature=3711778d3469d7ba51632a4620a03353533ffe351a57bc865c8815f5a9139b45
        -> "message": "Email successfully verified"
    {{BASE_URL}}/login
    ->
        {
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NTkzMTAsImV4cCI6MTYwMTk2MjkxMCwibmJmIjoxNjAxOTU5MzEwLCJqdGkiOiJQcXhiaU80UUh4QXRTcmppIiwic3ViIjozLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.LYUtAbPlxGI7FGfDIRivnnzCVnG8vweSilrEcAOFME8",
            "token_type": "bearer",
            "expires_in": 1601962910
        }
User Logout
    {{BASE_URL}}/logout
        -> "message": "Unauthenticated."
    {{BASE_URL}}/login
        -> token value 
    {{BASE_URL}}/logout
        Authentication: Bearer Token
        Token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC9kZXNpZ25ob3VzZS54eXpcL2FwaVwvbG9naW4iLCJpYXQiOjE2MDE5NjE1NzcsImV4cCI6MTYwMTk2NTE3NywibmJmIjoxNjAxOTYxNTc3LCJqdGkiOiJIbUNTckZGQ3FEV0xpdXF5Iiwic3ViIjoxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.hgB7VHHtQWWFxLcV5HUQ4Xo_qqO0niHqXfCgm46-d1U
        -> "message": "Logged out successfully!"
    Set TOKEN:
        {{BASE_URL}}/login
            Tests
            pm.environment.set("TOKEN", pm.response.json().token)
        {{BASE_URL}}/logout
            Authentication: Bearer Token
            Token: {{TOKEN}}
            Tests: pm.environment.set("TOKEN", "")
        -> "message": "Logged out successfully!"
The famous "ME" endpoint
    php artisan make:controller User/MeController
    {{BASE_URL}}/login
    {{BASE_URL}}/me
    ->
        {
            "user": {
                "id": 1,
                "username": "june",
                "name": "June May",
                "email": "june@email.com",
                "email_verified_at": "2020-10-06T01:26:02.000000Z",
                "tagline": null,
                "about": null,
                "location": null,
                "formatted_address": null,
                "available_to_hire": 0,
                "created_at": "2020-10-06T01:17:17.000000Z",
                "updated_at": "2020-10-06T01:26:02.000000Z"
            }
        }
    {{BASE_URL}}/logout
    {{BASE_URL}}/me -> {}
Introducing API Resources
    php artisan make:resource UserResource
Password Reset - Customising the Email Notification
    php artisan make:notification ResetPassword
Password Reset - Sending the reset email
    {{BASE_URL}}/password/email
        {
            "email": "june@email.com"
        }
    ->
        "status": "We have emailed your password reset link!"
        http://designhouse.xyz:3000/password/reset/fde4d3385a65ec6cc200c49139c731866e53ebd779039d30de80bebddf174937?email=june%40email.com
Password Reset - Resetting the Password
    {{BASE_URL}}/password/reset
        {
            "token": "fde4d3385a65ec6cc200c49139c731866e53ebd779039d30de80bebddf174937",
            "email": "june@email.com",
            "password": "password",
            "password_confirmation": "password"
        }
    ->  "status": "Your password has been reset!"
    {{BASE_URL}}/login
        check login again

        ==================================================================================================

                                Updating User Profile

User Profile Update
    php artisan make:controller User/SettingsController
    {{BASE_URL}}/login
    {{BASE_URL}}/settings/profile
    {
        "tagline": "Sr. Multimedia developer",
        "about": "I am a senior multimedia developer at IconX.",
        "name": "Larry Keith",
        "formatted_address": "Airport Road Montreal QC Canada",
        "location": {
            "latitude": 45.458507,
            "longitude": -73.753252
        },
        "available_to_hire": true
    }
    SELECT ST_AsText(location) AS location from designhouse.users where id=1;
    https://qiita.com/nkojima/items/bb21c72858606dedd817
User Password Update
    php artisan make:rule MatchOldPassword
    php artisan make:rule CheckSamePassword
    {{BASE_URL}}/settings/password
    ->  "message": "Password updated"
    {{BASE_URL}}/login to check login 

        ==================================================================================================

                                    Creating and managing Designs
    
The Design Model and Migrations
    php artisan make:model Design -m
    php artisan migrate
Setting up image upload Disks
    User -> Controller -> Save to Temporary Location -> Create Database Record -> Dispatch Job to Crop and Store Images 
        -> Store Image to Disk(S3 or Local) -> Delete Temporary files -> Update Database Record
    php artisan make:controller Designs/UploadController
    php artisan make:migration add_fields_to_designs --table=designs 
    php artisan migrate
    